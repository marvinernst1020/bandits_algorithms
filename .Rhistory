)
ucb_ar_compare_df <- bind_rows(baseline_ucb_df, ar_ucb_df)
ggplot(ucb_ar_compare_df, aes(x = time, y = cumulative_reward, color = model)) +
geom_line() +
labs(title = "Cumulative Reward: Baseline vs KFAS AR UCB",
x = "Time", y = "Cumulative Reward") +
theme_minimal()
ggplot(ucb_ar_compare_df, aes(x = time, y = cumulative_regret, color = model)) +
geom_line() +
labs(title = "Cumulative Regret: Baseline vs AR UCB",
x = "Time", y = "Cumulative Regret") +
theme_minimal()
generate_local_datasets(K = K, N = N, mu = mu, pi_list = pi_list,
n_runs = 25,
scenario_name = "A",
root_path = "data_local")
ts_multi_df <- future_lapply(1:25, function(i) {
simulate_model_on_run(
run_id = i, N = N, K = K,
algorithm = "ts", complexity = "kfas",
dynamics = "independent",
setting = "local",
data_path = "data_local/A"
)
}) |> bind_rows()
ts_summary <- ts_multi_df |> group_by(time, model) |> summarise(
avg_regret = mean(cumulative_regret),
avg_reward = mean(cumulative_reward),
.groups = "drop"
)
ggplot(ts_summary, aes(x = time, y = avg_regret, color = model)) +
geom_line(size = 1) +
labs(title = "Average Cumulative Regret over 25 Runs (Local State)",
x = "Time", y = "Cumulative Regret") +
theme_minimal()
ar_multi_df <- future_lapply(1:25, function(i) {
simulate_model_on_run(
run_id = i, N = N, K = K,
algorithm = "ts", complexity = "ar",
dynamics = "independent",
setting = "local",
data_path = "data_local/A"
)
}) |> bind_rows()
ar_multi_df <- future_lapply(1:25, function(i) {
simulate_model_on_run(
run_id = i, N = N, K = K,
algorithm = "ts", complexity = "kfas",
dynamics = "independent",
setting = "local",
data_path = "data_local/A"
)
}) |> bind_rows()
ar_multi_df <- future_lapply(1:25, function(i) {
simulate_model_on_run(
run_id = i, N = N, K = K,
algorithm = "ts", complexity = "kfas",
dynamics = "independent",
setting = "local",
data_path = "data_local/A"
)
}) |> bind_rows()
ar_multi_df <- future_lapply(1:25, function(i) {
simulate_model_on_run(
run_id = i, N = N, K = K,
algorithm = "ts", complexity = "kfas",
dynamics = "independent",
setting = "local",
data_path = "data_local/A"
)
}) |> bind_rows()
#install.packages("KFAS")
knitr::opts_chunk$set(echo = TRUE)
library(rjags)
library(coda)
library(tidyverse)
library(here)
library(glue)
library(future.apply)
library(stats)
library(KFAS)
plan(multisession)
source(here("src/load_all.R"))
set.seed(123)
K <- 2
N <- 5000
pi_list <- list(
matrix(c(0.997, 0.003,
0.003, 0.997), nrow = 2, byrow = TRUE),
matrix(c(0.997, 0.003,
0.003, 0.997), nrow = 2, byrow = TRUE)
)
mu <- matrix(c(
0.95, 0.1,  #
0.5,  0.7
), nrow = K, byrow = TRUE)
args(generate_local_datasets)
generate_local_datasets(K = K, N = 5000, mu = mu, pi_list = pi_list, n_runs = 1, scenario_name = "single_run", root_path = "data_local")
truth <- readRDS("data_local/single_run/local_truth_1.rds")
y_local <- truth$y
z_local <- truth$z
z_df <- as.data.frame(z_local)
z_df <- z_df |> mutate(arm = factor(1:K)) |>
pivot_longer(cols = starts_with("V"), names_to = "time", values_to = "state") |>
mutate(time = as.numeric(gsub("V", "", time)))
ggplot(z_df, aes(x = time, y = state, color = arm)) +
geom_line() +
facet_wrap(~ arm, ncol = 1) +
labs(title = "Latent Local States Over Time",
x = "Time", y = "State")
y_df <- as.data.frame(y_local)
y_df <- y_df |> mutate(arm = factor(1:K)) |>
pivot_longer(cols = starts_with("V"), names_to = "time", values_to = "reward") |>
mutate(time = as.numeric(gsub("V", "", time)))
ggplot(y_df, aes(x = time, y = reward, color = arm)) +
geom_line() +
facet_wrap(~ arm, ncol = 1) +
labs(title = "Reward Streams Per Arm",
x = "Time", y = "Reward")
baseline_ts_results <- bandit_baselines("ts", K, N, y_local, z_local, mu, dynamics = "independent", batch_size = 100)
baseline_ts_df <- data.frame(
time = seq_along(baseline_ts_results$cumulative_reward),
cumulative_reward = baseline_ts_results$cumulative_reward,
cumulative_regret = baseline_ts_results$cumulative_regret,
model = "Baseline TS"
)
res_ts_ar <- thompson_ar_kfas(K, N, mu, y_local, z_local, batch_size = 100, burn = 500, n_iter = 100, dynamics = "independent")
ts_ar_df <- data.frame(
time = seq_along(res_poor_ts$cumulative_reward),
cumulative_reward = res_ts_ar$cumulative_reward,
cumulative_regret = res_ts_ar$cumulative_regret,
model = "AR TS"
)
ts_ar_compare_df <- bind_rows(baseline_ts_df, ts_ar_df)
ggplot(ts_ar_compare_df, aes(x = time, y = cumulative_reward, color = model)) +
geom_line() +
labs(title = "Cumulative Reward: Baseline vs KFAS AR TS",
x = "Time", y = "Cumulative Reward") +
theme_minimal()
ggplot(ts_ar_compare_df, aes(x = time, y = cumulative_regret, color = model)) +
geom_line() +
labs(title = "Cumulative Regret: Baseline vs KFAS AR TS",
x = "Time", y = "Cumulative Regret") +
theme_minimal()
baseline_ucb_results <- bandit_baselines("ucb-tuned", K, N, y_local, z_local, mu,
dynamics = "independent", batch_size = 100)
baseline_ucb_df <- data.frame(
time = seq_along(baseline_ucb_results$cumulative_reward),
cumulative_reward = baseline_ucb_results$cumulative_reward,
cumulative_regret = baseline_ucb_results$cumulative_regret,
model = "Baseline UCB"
)
res_ar_ucb <- ucb_ar_kfas(K, N, mu, y_local, z_local, batch_size = 100, burn = 500, n_iter = 100, dynamics = "independent")
ar_ucb_df <- data.frame(
time = seq_along(res_ar_ucb$cumulative_reward),
cumulative_reward = res_ar_ucb$cumulative_reward,
cumulative_regret = res_ar_ucb$cumulative_regret,
model = "AR UCB"
)
ucb_ar_compare_df <- bind_rows(baseline_ucb_df, ar_ucb_df)
ggplot(ucb_ar_compare_df, aes(x = time, y = cumulative_reward, color = model)) +
geom_line() +
labs(title = "Cumulative Reward: Baseline vs KFAS AR UCB",
x = "Time", y = "Cumulative Reward") +
theme_minimal()
ggplot(ucb_ar_compare_df, aes(x = time, y = cumulative_regret, color = model)) +
geom_line() +
labs(title = "Cumulative Regret: Baseline vs AR UCB",
x = "Time", y = "Cumulative Regret") +
theme_minimal()
generate_local_datasets(K = K, N = N, mu = mu, pi_list = pi_list,
n_runs = 25,
scenario_name = "A",
root_path = "data_local")
ar_multi_df <- future_lapply(1:25, function(i) {
simulate_model_on_run(
run_id = i, N = N, K = K,
algorithm = "ts", complexity = "kfas",
dynamics = "independent",
setting = "local",
data_path = "data_local/A"
)
}) |> bind_rows()
ar_ucb_multi_df <- future_lapply(1:25, function(i) {
simulate_model_on_run(
run_id = i, N = N, K = K,
algorithm = "ucb", complexity = "kfas",
dynamics = "independent",
setting = "local",
data_path = "data_local/A"
)
}) |> bind_rows()
source(here("src/load_all.R"))
ar_ucb_multi_df <- future_lapply(1:25, function(i) {
simulate_model_on_run(
run_id = i, N = N, K = K,
algorithm = "ucb", complexity = "kfas",
dynamics = "independent",
setting = "local",
data_path = "data_local/A"
)
}) |> bind_rows()
system.time(
simulate_model_on_run(
run_id     = 1,
algorithm  = "ts",
complexity = "kfas",
dynamics   = "independent",
setting    = "local",
data_path  = "data_local/A"
)
)
source(here("src/load_all.R"))
ar_multi_df <- future_lapply(1:25, function(i) {
simulate_model_on_run(
run_id = i, N = N, K = K,
algorithm = "ts", complexity = "poor",
dynamics = "independent",
setting = "local",
data_path = "data_local/A"
)
}) |> bind_rows()
ucb_multi_df <- future_lapply(1:25, function(i) {
simulate_model_on_run(
run_id = i, N = N, K = K,
algorithm = "ucb", complexity = "poor",
dynamics = "independent",
setting = "local",
data_path = "data_local/A"
)
}) |> bind_rows()
#install.packages("KFAS")
knitr::opts_chunk$set(echo = TRUE)
library(rjags)
library(coda)
library(tidyverse)
library(here)
library(glue)
library(future.apply)
library(stats)
library(KFAS)
plan(multisession)
source(here("src/load_all.R"))
source(here("src/load_all.R"))
knitr::opts_chunk$set(echo = TRUE)
library(rjags)
library(coda)
library(tidyverse)
library(here)
library(glue)
library(future.apply)
library(stats)
library(KFAS)
library(nimble)
plan(multisession)
source(here("src/load_all.R"))
#install.packages("KFAS")
knitr::opts_chunk$set(echo = TRUE)
library(rjags)
library(coda)
library(tidyverse)
library(here)
library(glue)
library(future.apply)
library(stats)
library(KFAS)
library(nimble)
plan(multisession)
source(here("src/load_all.R"))
set.seed(123)
K <- 2
N <- 5000
pi_list <- list(
matrix(c(0.997, 0.003,
0.003, 0.997), nrow = 2, byrow = TRUE),
matrix(c(0.997, 0.003,
0.003, 0.997), nrow = 2, byrow = TRUE)
)
mu <- matrix(c(
0.95, 0.1,  #
0.5,  0.7
), nrow = K, byrow = TRUE)
args(generate_local_datasets)
generate_local_datasets(K = K, N = 5000, mu = mu, pi_list = pi_list, n_runs = 1, scenario_name = "single_run", root_path = "data_local")
truth <- readRDS("data_local/single_run/local_truth_1.rds")
y_local <- truth$y
z_local <- truth$z
z_df <- as.data.frame(z_local)
z_df <- z_df |> mutate(arm = factor(1:K)) |>
pivot_longer(cols = starts_with("V"), names_to = "time", values_to = "state") |>
mutate(time = as.numeric(gsub("V", "", time)))
ggplot(z_df, aes(x = time, y = state, color = arm)) +
geom_line() +
facet_wrap(~ arm, ncol = 1) +
labs(title = "Latent Local States Over Time",
x = "Time", y = "State")
y_df <- as.data.frame(y_local)
y_df <- y_df |> mutate(arm = factor(1:K)) |>
pivot_longer(cols = starts_with("V"), names_to = "time", values_to = "reward") |>
mutate(time = as.numeric(gsub("V", "", time)))
ggplot(y_df, aes(x = time, y = reward, color = arm)) +
geom_line() +
facet_wrap(~ arm, ncol = 1) +
labs(title = "Reward Streams Per Arm",
x = "Time", y = "Reward")
baseline_ts_results <- bandit_baselines("ts", K, N, y_local, z_local, mu, dynamics = "independent", batch_size = 100)
baseline_ts_df <- data.frame(
time = seq_along(baseline_ts_results$cumulative_reward),
cumulative_reward = baseline_ts_results$cumulative_reward,
cumulative_regret = baseline_ts_results$cumulative_regret,
model = "Baseline TS"
)
res_ts_ar <- thompson_ar_kfas(K, N, mu, y_local, z_local, batch_size = 100, burn = 500, n_iter = 100, dynamics = "independent")
ts_ar_df <- data.frame(
time = seq_along(res_poor_ts$cumulative_reward),
cumulative_reward = res_ts_ar$cumulative_reward,
cumulative_regret = res_ts_ar$cumulative_regret,
model = "AR TS"
)
ts_ar_compare_df <- bind_rows(baseline_ts_df, ts_ar_df)
ggplot(ts_ar_compare_df, aes(x = time, y = cumulative_reward, color = model)) +
geom_line() +
labs(title = "Cumulative Reward: Baseline vs KFAS AR TS",
x = "Time", y = "Cumulative Reward") +
theme_minimal()
ggplot(ts_ar_compare_df, aes(x = time, y = cumulative_regret, color = model)) +
geom_line() +
labs(title = "Cumulative Regret: Baseline vs KFAS AR TS",
x = "Time", y = "Cumulative Regret") +
theme_minimal()
baseline_ucb_results <- bandit_baselines("ucb-tuned", K, N, y_local, z_local, mu,
dynamics = "independent", batch_size = 100)
baseline_ucb_df <- data.frame(
time = seq_along(baseline_ucb_results$cumulative_reward),
cumulative_reward = baseline_ucb_results$cumulative_reward,
cumulative_regret = baseline_ucb_results$cumulative_regret,
model = "Baseline UCB"
)
res_ar_ucb <- ucb_ar_kfas(K, N, mu, y_local, z_local, batch_size = 100, burn = 500, n_iter = 100, dynamics = "independent")
ar_ucb_df <- data.frame(
time = seq_along(res_ar_ucb$cumulative_reward),
cumulative_reward = res_ar_ucb$cumulative_reward,
cumulative_regret = res_ar_ucb$cumulative_regret,
model = "AR UCB"
)
ucb_ar_compare_df <- bind_rows(baseline_ucb_df, ar_ucb_df)
ggplot(ucb_ar_compare_df, aes(x = time, y = cumulative_reward, color = model)) +
geom_line() +
labs(title = "Cumulative Reward: Baseline vs KFAS AR UCB",
x = "Time", y = "Cumulative Reward") +
theme_minimal()
ggplot(ucb_ar_compare_df, aes(x = time, y = cumulative_regret, color = model)) +
geom_line() +
labs(title = "Cumulative Regret: Baseline vs AR UCB",
x = "Time", y = "Cumulative Regret") +
theme_minimal()
generate_local_datasets(K = K, N = N, mu = mu, pi_list = pi_list,
n_runs = 25,
scenario_name = "A",
root_path = "data_local")
ar_multi_df <- future_lapply(1:25, function(i) {
simulate_model_on_run(
run_id = i, N = N, K = K,
algorithm = "ts", complexity = "poor",
dynamics = "independent",
setting = "local",
data_path = "data_local/A"
)
}) |> bind_rows()
ar_multi_df <- future_lapply(1:25, function(i) {
simulate_model_on_run(
run_id = i, N = N, K = K,
algorithm = "ts", complexity = "kfas",
dynamics = "independent",
setting = "local",
data_path = "data_local/A"
)
}) |> bind_rows()
library(nimble)
ar_multi_df <- future_lapply(1:25, function(i) {
simulate_model_on_run(
run_id = i, N = N, K = K,
algorithm = "ts", complexity = "kfas",
dynamics = "independent",
setting = "local",
data_path = "data_local/A"
)
}) |> bind_rows()
#install.packages("KFAS")
knitr::opts_chunk$set(echo = TRUE)
library(rjags)
library(coda)
library(tidyverse)
library(here)
library(glue)
library(future.apply)
library(stats)
library(KFAS)
library(nimble)
plan(multisession)
source(here("src/load_all.R"))
set.seed(123)
K <- 2
N <- 5000
pi_list <- list(
matrix(c(0.997, 0.003,
0.003, 0.997), nrow = 2, byrow = TRUE),
matrix(c(0.997, 0.003,
0.003, 0.997), nrow = 2, byrow = TRUE)
)
mu <- matrix(c(
0.95, 0.1,  #
0.5,  0.7
), nrow = K, byrow = TRUE)
args(generate_local_datasets)
generate_local_datasets(K = K, N = 5000, mu = mu, pi_list = pi_list, n_runs = 1, scenario_name = "single_run", root_path = "data_local")
truth <- readRDS("data_local/single_run/local_truth_1.rds")
y_local <- truth$y
z_local <- truth$z
z_df <- as.data.frame(z_local)
z_df <- z_df |> mutate(arm = factor(1:K)) |>
pivot_longer(cols = starts_with("V"), names_to = "time", values_to = "state") |>
mutate(time = as.numeric(gsub("V", "", time)))
ggplot(z_df, aes(x = time, y = state, color = arm)) +
geom_line() +
facet_wrap(~ arm, ncol = 1) +
labs(title = "Latent Local States Over Time",
x = "Time", y = "State")
y_df <- as.data.frame(y_local)
y_df <- y_df |> mutate(arm = factor(1:K)) |>
pivot_longer(cols = starts_with("V"), names_to = "time", values_to = "reward") |>
mutate(time = as.numeric(gsub("V", "", time)))
ggplot(y_df, aes(x = time, y = reward, color = arm)) +
geom_line() +
facet_wrap(~ arm, ncol = 1) +
labs(title = "Reward Streams Per Arm",
x = "Time", y = "Reward")
baseline_ts_results <- bandit_baselines("ts", K, N, y_local, z_local, mu, dynamics = "independent", batch_size = 100)
baseline_ts_df <- data.frame(
time = seq_along(baseline_ts_results$cumulative_reward),
cumulative_reward = baseline_ts_results$cumulative_reward,
cumulative_regret = baseline_ts_results$cumulative_regret,
model = "Baseline TS"
)
res_ts_ar <- thompson_ar_kfas(K, N, mu, y_local, z_local, batch_size = 100, burn = 500, n_iter = 100, dynamics = "independent")
ts_ar_df <- data.frame(
time = seq_along(res_poor_ts$cumulative_reward),
cumulative_reward = res_ts_ar$cumulative_reward,
cumulative_regret = res_ts_ar$cumulative_regret,
model = "AR TS"
)
ts_ar_compare_df <- bind_rows(baseline_ts_df, ts_ar_df)
ggplot(ts_ar_compare_df, aes(x = time, y = cumulative_reward, color = model)) +
geom_line() +
labs(title = "Cumulative Reward: Baseline vs KFAS AR TS",
x = "Time", y = "Cumulative Reward") +
theme_minimal()
ggplot(ts_ar_compare_df, aes(x = time, y = cumulative_regret, color = model)) +
geom_line() +
labs(title = "Cumulative Regret: Baseline vs KFAS AR TS",
x = "Time", y = "Cumulative Regret") +
theme_minimal()
baseline_ucb_results <- bandit_baselines("ucb-tuned", K, N, y_local, z_local, mu,
dynamics = "independent", batch_size = 100)
baseline_ucb_df <- data.frame(
time = seq_along(baseline_ucb_results$cumulative_reward),
cumulative_reward = baseline_ucb_results$cumulative_reward,
cumulative_regret = baseline_ucb_results$cumulative_regret,
model = "Baseline UCB"
)
res_ar_ucb <- ucb_ar_kfas(K, N, mu, y_local, z_local, batch_size = 100, burn = 500, n_iter = 100, dynamics = "independent")
ar_ucb_df <- data.frame(
time = seq_along(res_ar_ucb$cumulative_reward),
cumulative_reward = res_ar_ucb$cumulative_reward,
cumulative_regret = res_ar_ucb$cumulative_regret,
model = "AR UCB"
)
ucb_ar_compare_df <- bind_rows(baseline_ucb_df, ar_ucb_df)
ggplot(ucb_ar_compare_df, aes(x = time, y = cumulative_reward, color = model)) +
geom_line() +
labs(title = "Cumulative Reward: Baseline vs KFAS AR UCB",
x = "Time", y = "Cumulative Reward") +
theme_minimal()
ggplot(ucb_ar_compare_df, aes(x = time, y = cumulative_regret, color = model)) +
geom_line() +
labs(title = "Cumulative Regret: Baseline vs AR UCB",
x = "Time", y = "Cumulative Regret") +
theme_minimal()
generate_local_datasets(K = K, N = N, mu = mu, pi_list = pi_list,
n_runs = 25,
scenario_name = "A",
root_path = "data_local")
library(nimble)
ar_multi_df <- future_lapply(1:25, function(i) {
simulate_model_on_run(
run_id = i, N = N, K = K,
algorithm = "ts", complexity = "kfas",
dynamics = "independent",
setting = "local",
data_path = "data_local/A"
)
}) |> bind_rows()
library(nimble)
ar_multi_df <- future_lapply(1:25, function(i) {
simulate_model_on_run(
run_id = i, N = N, K = K,
algorithm = "ts", complexity = "poor",
dynamics = "independent",
setting = "local",
data_path = "data_local/A"
)
}) |> bind_rows()
